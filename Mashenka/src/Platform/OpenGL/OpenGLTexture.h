#pragma once
#include "Mashenka/Renderer/Texture.h"
#include <glad/glad.h>

namespace Mashenka
{
    class OpenGLTexture2D : public Texture2D
    {
    public:
        // Create
        OpenGLTexture2D(uint32_t width, uint32_t height); // create a texture with the given width and height
        OpenGLTexture2D(const std::string& path);
        ~OpenGLTexture2D() override;

        // Getters
        virtual uint32_t GetWidth() const override { return m_Width; }
        virtual uint32_t GetHeight() const override { return m_Height; }

        // Set the data of the texture, it is used for the texture that is created with the width and height
        // Explanation: https://www.khronos.org/opengl/wiki/Common_Mistakes#Creating_a_complete_texture
        // the data needs to be create because the texture is created by OpenGL based on the width and height, so we need to set the data of the texture
        virtual void SetData(void* data, uint32_t size) override; 

        virtual void Bind(uint32_t slot = 0) const override;

        // compare the two texture2d by comparing the rendererID
        virtual bool operator==(const Texture& other) const override {return  m_RendererID == ((OpenGLTexture2D&)other).m_RendererID;}


    private:
        std::string m_Path;
        uint32_t m_Width, m_Height;
        uint32_t m_RendererID; //generated by OpenGL with glGenTextures
        GLenum m_InternalFormat, m_DataFormat; // internal format is the format that OpenGL uses to store the texture, data format is the format of the data that we pass to OpenGL
        
    };

}
