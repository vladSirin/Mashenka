#include "mkpch.h"
#include "OpenGLTexture.h"
#include "stb_image.h"
#include <glad/glad.h>

namespace Mashenka
{
    // Constructor
    OpenGLTexture2D::OpenGLTexture2D(const std::string& path)
        : m_Path(path)
    {
        // load the image
        int width, height, channels;
        stbi_set_flip_vertically_on_load(1); // flip the image vertically
        stbi_uc* data = nullptr;
        {
            // Explanation: https://www.khronos.org/opengl/wiki/Common_Mistakes#Creating_a_complete_texture
            data = stbi_load(path.c_str(), &width, &height, &channels, 0);
        }
        MK_CORE_ASSERT(data, "Failed to load image!")

        // set the width and height
        m_Width = width;
        m_Height = height;

        // ----------------- Create the texture -----------------
        // Explanation: https://www.khronos.org/opengl/wiki/Texture_Storage
        // Explanation: https://www.khronos.org/opengl/wiki/Common_Mistakes#Creating_a_complete_texture

        // Generate the texture, renderID is generated by OpenGL with glGenTextures
        glCreateTextures(GL_TEXTURE_2D, 1, &m_RendererID);
        // Storage for the texture, we only need 1 level, so we use 1
        glTextureStorage2D(m_RendererID, 1, GL_RGB8, m_Width, m_Height);

        // Set the texture parameters, for min filter we use GL_LINEAR, for mag filter we use GL_NEAREST
        glTextureParameteri(m_RendererID, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTextureParameteri(m_RendererID, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

        // Set the texture parameters
        // SubImage2D: https://www.khronos.org/opengl/wiki/GLAPI/glTexSubImage2D
        glTextureSubImage2D(m_RendererID, 0, 0, 0, m_Width, m_Height, GL_RGB, GL_UNSIGNED_BYTE, data);
        stbi_image_free(data);
    }

    OpenGLTexture2D::~OpenGLTexture2D()
    {
        glDeleteTextures(1, &m_RendererID);
    }

    void OpenGLTexture2D::Bind(uint32_t slot) const
    {
        glBindTextureUnit(slot, m_RendererID);
    }


}
